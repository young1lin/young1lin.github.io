<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JUC on YL&#39;s Log</title>
    <link>http://localhost:1313/tags/juc/</link>
    <description>Recent content in JUC on YL&#39;s Log</description>
    <generator>Hugo -- 0.150.1</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 29 Jul 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/juc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>For Interview</title>
      <link>http://localhost:1313/posts/interview/</link>
      <pubDate>Wed, 29 Jul 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/interview/</guid>
      <description>&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;仅供本人面试前准备，其他人还是别看了，没意义。有很多我缩写，省去了很多易理解的部分。&lt;/p&gt;
&lt;p&gt;我尽量找别人已经总结过的东西，而不是自己写，无意义，面试的八股文罢了。都是靠努力就能实现的东西。&lt;/p&gt;
&lt;h1 id=&#34;常见容器&#34;&gt;常见容器&lt;/h1&gt;
&lt;h2 id=&#34;arraylist-详解&#34;&gt;ArrayList 详解&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://note.youdao.com/ynoteshare1/index.html?id=efd2a3a29d2626acea2b053e56bae5cc&amp;amp;type=notebook#/04F1A0EFF8F241C2A89E2234AAF0A36A&#34;&gt;https://note.youdao.com/ynoteshare1/index.html?id=efd2a3a29d2626acea2b053e56bae5cc&amp;type=notebook#/04F1A0EFF8F241C2A89E2234AAF0A36A&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;底层&lt;strong&gt;基于数组&lt;/strong&gt;实现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;创建 ArrayList 如果不指定大小&lt;/strong&gt;，会先创建一个&lt;strong&gt;大小为 0 的 Object[ ] 数组&lt;/strong&gt; ，&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;第一次添加数据&lt;/strong&gt;时，会&lt;strong&gt;扩容&lt;/strong&gt;成 ArrayList 的 默认大小 &lt;strong&gt;default_capacity：10&lt;/strong&gt;**；**&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;创建时如果&lt;strong&gt;指定大小&lt;/strong&gt;，直接&lt;strong&gt;创建指定大小的Object[ ]数组&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add（）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;对 &lt;strong&gt;size+1&lt;/strong&gt;，去&lt;strong&gt;判断数组是否满了&lt;/strong&gt;，如果满了就&lt;strong&gt;调用 grow（）方法扩容&lt;/strong&gt;，扩容大小为，&lt;strong&gt;原数组大小 + 原数组大小右移一位&lt;/strong&gt;。也就是扩容到原来的&lt;strong&gt;1.5倍&lt;/strong&gt;。JDK 1.6 是 1.5 倍 +1 ，JDK 1.7，1.8 是 1.5 倍。&lt;/li&gt;
&lt;li&gt;然后把老数组拷贝到新数组里&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;elementData&lt;/strong&gt; = &lt;strong&gt;Arrays.copyOf(elementData, newCapacity);&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最后 &lt;strong&gt;elementData[ size++ ] = e&lt;/strong&gt;，对数组赋值，（并且size+1）&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;add（index，e）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;首先&lt;strong&gt;对index做数组越界检查rangeCheck(index)&lt;/strong&gt;;  如果越界了，抛数组越界异常&lt;/li&gt;
&lt;li&gt;如果没越界，还是&lt;strong&gt;对 size + 1，判断是否需要扩容&lt;/strong&gt;，如果需要扩容，调用&lt;strong&gt;grow&lt;/strong&gt;方法&lt;/li&gt;
&lt;li&gt;如果需要扩容，调用&lt;strong&gt;System.arraycopy（1,2,3,4,5）&lt;strong&gt;方法。参数解释&lt;/strong&gt;1：原来的数组，2：从哪里开始复制。3：复制的目标数组。4：目标数组的第几位开始复制。5：一共复制几个数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;System.arraycopy(elementData, index, elementData, index + 1, size - index);&lt;/li&gt;
&lt;li&gt;假设把数字6插入到第3位，复制过后的数组是，1 2 3 4 5 -&amp;gt; &lt;strong&gt;1 2 3 3 4 5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;然后再把目标的位置的值修改，变为 &lt;strong&gt;1 2 6 3 4 5&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;最后size++；&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;set（index，e）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;首先解释，set这个方法是替换该位置原来的元素，所以不会使数组变大，不会做扩容判断&lt;/li&gt;
&lt;li&gt;然后对index做数组越界检查，如果越界了，抛数组越界异常&lt;/li&gt;
&lt;li&gt;把e替换到数组的index位置&lt;/li&gt;
&lt;li&gt;返回数组index位置的原始值&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;remove（index）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;首先&lt;strong&gt;对index做数组越界检查rangeCheck(index);&lt;/strong&gt;，如果越界了，抛数组越界异常&lt;/li&gt;
&lt;li&gt;然后进行&lt;strong&gt;数组拷贝 System.arraycopy(elementData, index+1, elementData, index,size - index - 1);&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;假设把第三位数字删除，&lt;strong&gt;1 2 3 4 5 6 	- &amp;gt; 1	2 4 5 6 6&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;然后 element[size&amp;ndash;] = null;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;最后&lt;strong&gt;返回被删除的值&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;get（index）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;首先对index做数组越界检查&lt;strong&gt;rangeCheck(index);&lt;/strong&gt;，如果越界了，抛数组越界异常&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;return elementData(index);&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;总结来说，AraayList的get方法效率非常高，直接返回对应下标值，add方法和remove方法，效率就有点低了，需要考虑数组扩容和数组拷贝的问题&lt;/strong&gt;**。**&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
